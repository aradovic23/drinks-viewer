import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { api } from "../utils/api";
import { Input } from "../components/Input";
import { Select } from "../components/Select";
import { Checkbox } from "../components/Checkbox";
import { Toast } from "../components/Toast";
import useToaster from "../hooks/useToaster";
import Button from "../components/Button";

export const volumeOptions: string[] = [
  "none",
  "0.03",
  "0.05",
  "0.1",
  "0.187",
  "0.2",
  "0.25",
  "0.3",
  "0.33",
  "0.35",
  "0.4",
  "0.5",
];

const typeOptions: string[] = ["none", "Green", "Black", "Fruit", "Herb"];

const SubmitDrink: NextPage = () => {
  const createDrinkMutation = api.drinks.createDrink.useMutation();
  const createCategoryMutation = api.drinks.createCategory.useMutation();
  const categories = api.drinks.getCategories.useQuery();

  const [productTitle, setProductTitle] = useState("");
  const [productPrice, setProductPrice] = useState("");
  const [productVolume, setProductVolume] = useState(volumeOptions[0]);
  const [productType, setProductType] = useState(typeOptions[0]);
  const [productTag, setProductTag] = useState("");
  const [productCategory, setProductCategory] = useState("Alcoholic");
  const [productDescription, setProductDescription] = useState("");
  const [categoryUrl, setCategoryUrl] = useState("");
  const [isTagChecked, setIsTagChecked] = useState(false);
  const [newCategory, setNewCategory] = useState("");
  const [isCreateNewCategoryChecked, setIsCreateNewCategoryChecked] =
    useState(false);
  const [isVisible, message, showToaster, isDisabled] = useToaster();

  const handleSubmitDrink = async (e: React.FormEvent) => {
    e.preventDefault();
    await createDrinkMutation.mutateAsync({
      title: productTitle,
      price: productPrice,
      tag: productTag,
      volume: productVolume?.toLowerCase() === "none" ? null : productVolume,
      category: productCategory,
      type: productCategory.toLowerCase() === "tea" ? productType : null,
      description: productDescription,
    });

    showToaster(`${productTitle} added`, { type: "toPage", path: "/drinks" });
  };

  const handleCreateNewCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    await createCategoryMutation.mutateAsync({
      categoryName: newCategory,
      url: categoryUrl != "" ? categoryUrl : undefined,
    });
    setIsCreateNewCategoryChecked(false);
    await categories.refetch();

    setNewCategory("");
    showToaster(`${productCategory} added`);
    setIsCreateNewCategoryChecked(!isCreateNewCategoryChecked);
  };

  return (
    <>
      <Head>
        <title>Create a drink</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex h-screen flex-col items-center py-10">
        <h1 className="text-center text-2xl font-bold uppercase">
          Create a drink
        </h1>

        <form className="flex w-96 flex-col gap-5" onSubmit={handleSubmitDrink}>
          <div className="">
            <h2 className="my-2 text-center text-sm font-semibold uppercase text-gray-500">
              Main info
            </h2>
            <Select
              disabled={false}
              label="Category"
              onChange={(e) => setProductCategory(e.target.value)}
            >
              {(categories.data || []).map(
                (category) =>
                  category.categoryName.toLowerCase() != "all" && (
                    <option value={category.categoryName} key={category.id}>
                      {category.categoryName}
                    </option>
                  )
              )}
            </Select>
            <div className="flex w-96 flex-col gap-5">
              <Checkbox
                label="Create new category?"
                onChange={() =>
                  setIsCreateNewCategoryChecked(!isCreateNewCategoryChecked)
                }
              />
            </div>
            {isCreateNewCategoryChecked && (
              <div className=" flex flex-col gap-2 rounded-lg bg-base-300/70 p-5">
                <Input
                  label="Category name"
                  value={newCategory}
                  required={false}
                  inputMode="text"
                  onChange={(e) => setNewCategory(e.target.value)}
                  placeholder="Enter category name"
                />
                <Input
                  label="Image Url (Optional)"
                  value={categoryUrl}
                  required={false}
                  inputMode="text"
                  onChange={(e) => setCategoryUrl(e.target.value)}
                  placeholder="Paste image url"
                />

                <button
                  onClick={handleCreateNewCategory}
                  className="btn-outline btn-secondary btn mt-2"
                >
                  Create new category
                </button>
              </div>
            )}

            <Input
              value={productTitle}
              onChange={(e) => setProductTitle(e.target.value)}
              label="Product Name"
              required={true}
              inputMode="text"
              placeholder="Enter product name"
            />
            <Input
              value={productPrice}
              onChange={(e) => setProductPrice(e.target.value)}
              label="Price"
              required={true}
              inputMode="numeric"
              placeholder="Enter product price"
            />
          </div>
          <div className="max-w-sm md:max-w-md">
            <h2 className="my-2 text-center text-sm font-semibold uppercase text-gray-500">
              More options
            </h2>
            <Select
              disabled={false}
              label="Volume"
              onChange={(e) => setProductVolume(e.target.value)}
            >
              {volumeOptions.map((volume) => (
                <option value={volume} key={volume}>
                  {volume}
                </option>
              ))}
            </Select>
            {productCategory.toLowerCase() === "tea" && (
              <Select
                disabled={productCategory.toLowerCase() != "tea"}
                label="Type"
                onChange={(e) => setProductType(e.target.value)}
              >
                {typeOptions.map((type) => (
                  <option value={type} key={type}>
                    {type}
                  </option>
                ))}
              </Select>
            )}
            <Checkbox
              label="Add a special tag?"
              onChange={() => setIsTagChecked(!isTagChecked)}
            />
            {isTagChecked && (
              <Input
                value={productTag}
                onChange={(e) => setProductTag(e.target.value)}
                label="Tag"
                required={false}
                inputMode="text"
                placeholder="Enter tag name"
              />
            )}

            {productCategory.toLowerCase() === "cocktails" && (
              <textarea
                className="textarea-bordered textarea my-5 w-full py-5"
                placeholder="Cocktail description"
                value={productDescription}
                onChange={(e) => setProductDescription(e.target.value)}
              ></textarea>
            )}
          </div>

          <Button disabled={isDisabled} backgroundColor="bg-secondary">
            Submit test
          </Button>
        </form>
        {isVisible && <Toast label={message} type="alert-success" />}
      </main>
    </>
  );
};

export default SubmitDrink;
