import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { api } from "../utils/api";
import { Input } from "../components/Input";
import { Select } from "../components/Select";
import { Checkbox } from "../components/Checkbox";
import Button from "../components/Button";
import { Textarea } from "../components/Textarea";
import { useGetCategory } from "../hooks/useGetCategory";
import { Form } from "../components/Form";
import { useSession } from "next-auth/react";
import AccessDenied from "../components/AccessDenied";
import Spinner from "../components/Spinner";
import CreateNewCategory from "../components/CreateNewCategory";
import { toast } from "react-toastify";
import { useRouter } from "next/router";

export const volumeOptions: string[] = [
  "none",
  "0.03",
  "0.05",
  "0.1",
  "0.187",
  "0.2",
  "0.25",
  "0.3",
  "0.33",
  "0.35",
  "0.4",
  "0.5",
];

const typeOptions: string[] = ["none", "Green", "Black", "Fruit", "Herb"];

const SubmitDrink: NextPage = () => {
  const createDrinkMutation = api.drinks.createDrink.useMutation();
  const categories = api.categories.getCategories.useQuery();

  const [productTitle, setProductTitle] = useState("");
  const [productPrice, setProductPrice] = useState("");
  const [productVolume, setProductVolume] = useState(volumeOptions[0]);
  const [productType, setProductType] = useState(typeOptions[0]);
  const [productTag, setProductTag] = useState("");
  const [productDescription, setProductDescription] = useState("");
  const [productCategoryId, setProductCategoryId] = useState(17);
  const [isTagChecked, setIsTagChecked] = useState(false);
  const [isCreateNewCategoryChecked, setIsCreateNewCategoryChecked] =
    useState(false);
  const { category: currentCategory } = useGetCategory(productCategoryId);
  const { data: sessionData, status } = useSession();
  const router = useRouter();

  if (status === "loading") {
    return <Spinner />;
  }

  if (sessionData?.user?.role != "admin") {
    return <AccessDenied />;
  }

  const handleSubmitDrink = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      await createDrinkMutation.mutateAsync({
        title: productTitle,
        price: productPrice,
        tag: productTag != "" ? productTag : null,
        volume: productVolume?.toLowerCase() === "none" ? null : productVolume,
        type:
          currentCategory?.categoryName.toLowerCase() === "tea"
            ? productType
            : null,
        description:
          currentCategory?.categoryName.toLowerCase() === "cocktails"
            ? productDescription
            : null,
        categoryId: productCategoryId,
      });
      toast.success(`${productTitle} added`);
      void router.push("/drinks");
    } catch (error) {
      if (typeof error === "string") {
        toast.error(error);
      } else {
        toast.error((error as Error).message);
      }
    }
  };

  const handleIsActive = (state: boolean) => {
    setIsCreateNewCategoryChecked(state);
  };

  return (
    <>
      <Head>
        <title>Create a drink</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mb-10 flex max-w-[500px] flex-col items-center py-10 px-4">
        <h1 className="mb-5 text-center text-2xl font-bold uppercase">
          Create a drink
        </h1>

        <Form onSubmit={handleSubmitDrink}>
          <div className="flex space-x-2">
            <div className="flex-1">
              <Select
                onChange={(e) => setProductCategoryId(parseInt(e.target.value))}
              >
                {(categories.data || []).map(
                  (category) =>
                    category.categoryName.toLowerCase() !== "all" && (
                      <option value={category.id} key={category.id}>
                        {category.categoryName}
                      </option>
                    )
                )}
              </Select>
            </div>

            <Button
              onClick={() =>
                setIsCreateNewCategoryChecked(!isCreateNewCategoryChecked)
              }
              addOnStyle="shrink"
              htmlType="button"
              variant="btn-outline"
            >
              Create New
            </Button>
          </div>

          {isCreateNewCategoryChecked && (
            <CreateNewCategory handleIsActive={handleIsActive} />
          )}

          <Input
            value={productTitle}
            onChange={(e) => setProductTitle(e.target.value)}
            label="Product Name"
            required
            inputMode="text"
            placeholder="Enter product name (e.g. Fanta)"
          />
          <Input
            value={productPrice}
            onChange={(e) => setProductPrice(e.target.value)}
            label="Price"
            required
            inputMode="numeric"
            placeholder="Enter product price (e.g. 150)"
          />
          <Select
            label="Volume"
            onChange={(e) => setProductVolume(e.target.value)}
          >
            {volumeOptions.map((volume) => (
              <option value={volume} key={volume}>
                {volume}
              </option>
            ))}
          </Select>
          {currentCategory?.categoryName.toLowerCase() === "tea" && (
            <Select
              disabled={currentCategory.categoryName.toLowerCase() != "tea"}
              label="Type"
              onChange={(e) => setProductType(e.target.value)}
            >
              {typeOptions.map((type) => (
                <option value={type} key={type}>
                  {type}
                </option>
              ))}
            </Select>
          )}
          <Checkbox
            label="Add a special tag?"
            onChange={() => setIsTagChecked(!isTagChecked)}
          />
          {isTagChecked && (
            <Input
              value={productTag}
              onChange={(e) => setProductTag(e.target.value)}
              label="Tag"
              inputMode="text"
              placeholder="Enter tag name (e.g. new)"
            />
          )}

          {currentCategory?.categoryName.toLowerCase() === "cocktails" && (
            <Textarea
              placeholder="Cocktail description"
              value={productDescription}
              onChange={(e) => setProductDescription(e.target.value)}
            ></Textarea>
          )}

          <Button
            disabled={createDrinkMutation.isLoading}
            backgroundColor="bg-secondary"
          >
            Add product
          </Button>
        </Form>
      </main>
    </>
  );
};

export default SubmitDrink;
