import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { api } from "../utils/api";
import { useGetCategory } from "../hooks/useGetCategory";
import { Form } from "../components/Form";
import { useSession } from "next-auth/react";
import AccessDenied from "../components/AccessDenied";
import CreateNewCategory from "../components/CreateNewCategory";
import {
  Button,
  Container,
  Flex,
  FormControl,
  FormLabel,
  Heading,
  Image,
  Input,
  Select,
  Spinner,
  Switch,
  Text,
  Textarea,
  useToast,
  VStack,
} from "@chakra-ui/react";
import { useForm } from "react-hook-form";
import type { Drink } from "@prisma/client";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import nextI18nConfig from "../../next-i18next.config.mjs";
import { useTranslation } from "next-i18next";
import ImageSearch from "../components/ImageSearch";

export const getServerSideProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ["common"], nextI18nConfig, [
      "en",
      "sr",
    ])),
  },
});

// TODO: Add to DB:
export const volumeOptions: string[] = [
  "0.03",
  "0.05",
  "0.1",
  "0.187",
  "0.2",
  "0.25",
  "0.3",
  "0.33",
  "0.35",
  "0.4",
  "0.5",
];

// TODO: Add to DB:
const typeOptions: string[] = ["Green", "Black", "Fruit", "Herb"];

const SubmitDrink: NextPage = () => {
  const createDrinkMutation = api.drinks.createDrink.useMutation();
  const categories = api.categories.getCategories.useQuery();

  const [isTagChecked, setIsTagChecked] = useState(false);
  const [isVolumeChecked, setIsVolumeCheked] = useState(false);
  const [addImage, setAddImage] = useState(false);
  const [productImage, setProductImage] = useState("");
  const [isCreateNewCategoryChecked, setIsCreateNewCategoryChecked] =
    useState(false);
  const { data: sessionData, status } = useSession();
  const toast = useToast();

  const { t } = useTranslation("common");

  const {
    register,
    handleSubmit,
    watch,
    reset,
    formState: { isSubmitting },
  } = useForm<Drink>();

  const watchCategoryId = watch("categoryId");
  const { category: currentCategory } = useGetCategory(Number(watchCategoryId));

  const addDescription = currentCategory?.addDescription;
  const addTypes = currentCategory?.addTypes;

  if (status === "loading") {
    return (
      <Container>
        <Spinner
          thickness="4px"
          speed="0.65s"
          emptyColor="gray.200"
          color="blue.500"
          size="xl"
        />
      </Container>
    );
  }

  if (sessionData?.user?.role != "admin") {
    return <AccessDenied />;
  }

  const handleSubmitDrink = async (data: Drink) => {
    try {
      await createDrinkMutation.mutateAsync({
        title: data.title,
        price: data.price,
        tag: data.tag,
        volume: data.volume,
        type: data.type,
        description: data.description,
        categoryId: Number(data.categoryId),
        image: productImage,
      });
      toast({
        title: `${data.title ?? "Product"} created!`,
        status: "success",
        isClosable: true,
        position: "top",
      });
      reset();
      setProductImage("");
      setAddImage(false);
      setIsTagChecked(false);
      setIsVolumeCheked(false);
    } catch (error) {
      if (typeof error === "string") {
        console.log(error);
      } else {
        console.log((error as Error).message);
      }
    }
  };

  const handleIsActive = (state: boolean) => {
    setIsCreateNewCategoryChecked(state);
  };

  const handleSelectedImage = (image: string) => {
    setProductImage(image);
  };

  return (
    <>
      <Head>
        <title>{t("create_new_product")}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container as="main">
        <Heading my="5" textAlign="center">
          {t("create_new_product")}
        </Heading>

        <Form onSubmit={handleSubmit(handleSubmitDrink)}>
          <Flex gap="2">
            <Select
              {...register("categoryId", {
                required: true,
                validate: {
                  notZero: (v) => Number(v) > 0,
                },
              })}
            >
              <option value={0}>{t("elements.placeholder.category")}</option>
              {(categories.data || []).map((category) => (
                <option value={category.id} key={category.id}>
                  {category.categoryName}
                </option>
              ))}
            </Select>
            <Button
              onClick={() =>
                setIsCreateNewCategoryChecked(!isCreateNewCategoryChecked)
              }
            >
              {t("elements.button.create_new")}
            </Button>
          </Flex>

          {isCreateNewCategoryChecked && (
            <CreateNewCategory handleIsActive={handleIsActive} />
          )}
          <FormControl>
            <FormLabel>{t("elements.label.title")}</FormLabel>
            <Input
              placeholder={t("elements.placeholder.title") ?? "Title"}
              {...register("title", {
                required: true,
                minLength: {
                  value: 3,
                  message: "Product should have minimum 3 letters",
                },
              })}
            />
          </FormControl>

          <FormControl>
            <FormLabel>{t("elements.label.price")}</FormLabel>
            <Input
              id="price"
              placeholder={t("elements.placeholder.price") ?? "Price"}
              inputMode="numeric"
              {...register("price", {
                required: "Req and must be a number",
                minLength: 2,
                pattern: /^[0-9]*$/,
              })}
            />
          </FormControl>

          <VStack rounded="lg" p="3" bg="blackAlpha.100">
            <Flex w="full" justify="space-between" align="center">
              <FormLabel>{t("elements.additional_field.add_volume")}</FormLabel>
              <Switch
                onChange={() => setIsVolumeCheked(!isVolumeChecked)}
                size="lg"
              />
            </Flex>
            {isVolumeChecked && (
              <Select
                {...register("volume", {
                  validate: {
                    notZero: (v) => Number(v) > 0,
                  },
                })}
              >
                <option value={0}>{t("elements.placeholder.volume")}</option>
                {volumeOptions.map((volume) => (
                  <option value={volume} key={volume}>
                    {volume}
                  </option>
                ))}
              </Select>
            )}
          </VStack>

          {addTypes && (
            <Select
              {...register("type", {
                validate: {
                  notZero: (v) => Number(v) !== 0,
                },
              })}
            >
              <option value={0}>{t("elements.placeholder.type")}</option>
              {typeOptions.map((type) => (
                <option value={type} key={type}>
                  {type}
                </option>
              ))}
            </Select>
          )}

          <VStack rounded="lg" p="3" bg="blackAlpha.100">
            <Flex w="full" justify="space-between" align="center">
              <FormLabel>{t("elements.additional_field.add_tag")}</FormLabel>
              <Switch
                onChange={() => setIsTagChecked(!isTagChecked)}
                size="lg"
              />
            </Flex>
            {isTagChecked && (
              <Input
                placeholder={t("elements.placeholder.tag") ?? "Tag"}
                {...register("tag")}
                colorScheme="blackAlpha"
              />
            )}
          </VStack>

          {addDescription && (
            <>
              <FormControl>
                <FormLabel>{t("elements.label.description")}</FormLabel>
                <Textarea
                  placeholder="Description"
                  {...register("description")}
                />
              </FormControl>

              <VStack rounded="lg" p="3" bg="blackAlpha.100">
                <Flex w="full" justify="space-between" align="center">
                  <FormLabel>
                    {t("elements.additional_field.add_image")}
                  </FormLabel>
                  <Switch onChange={() => setAddImage(!addImage)} size="lg" />
                </Flex>
                {addImage && (
                  <ImageSearch handleSelectedImage={handleSelectedImage} />
                )}
                {productImage && (
                  <VStack>
                    <Text>{t("elements.label.image")}</Text>
                    <Image
                      alt="product-image"
                      boxSize="md"
                      objectFit="cover"
                      src={productImage}
                      rounded="md"
                    />
                  </VStack>
                )}
              </VStack>
            </>
          )}

          <Button type="submit" colorScheme="primary" isLoading={isSubmitting}>
            {t("elements.button.submit")}
          </Button>
        </Form>
      </Container>
    </>
  );
};

export default SubmitDrink;
