import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { api } from "../utils/api";
import { useEffect, useState } from "react";
import { useGetCategory } from "../hooks/useGetCategory";
import AccessDenied from "../components/AccessDenied";
import Spinner from "../components/Spinner";
import { Form } from "../components/Form";
import {
  Box,
  Button,
  Container,
  FormControl,
  FormLabel,
  Grid,
  GridItem,
  Heading,
  HStack,
  Image,
  Input,
  Select,
  Stack,
  Text,
  useToast,
  VStack,
} from "@chakra-ui/react";
import { useForm } from "react-hook-form";
import type { Category } from "@prisma/client";
import ImageSearch from "../components/ImageSearch";

const EditCategory: NextPage = () => {
  const { data: sessionData, status } = useSession();
  const { data: categories } = api.categories.getCategories.useQuery();
  const [categoryId, setCategoryId] = useState(0);
  const [imageFromSearch, setImageFromSearch] = useState("");
  const { category: productCategory } = useGetCategory(categoryId);
  const updateCategory = api.categories.updateCategory.useMutation();
  const deleteSingleCategory = api.categories.deleteCategory.useMutation();

  const hasSearchedImage = imageFromSearch !== "";

  const { register, handleSubmit, reset } = useForm<Category>({
    defaultValues: productCategory,
  });

  const utils = api.useContext();
  const toast = useToast();

  useEffect(() => {
    reset(productCategory);
  }, [productCategory, reset]);

  const handleCategoryUpdate = async (category: Category) => {
    try {
      await updateCategory.mutateAsync(
        {
          id: categoryId,
          data: {
            categoryName: category.categoryName,
            url: hasSearchedImage ? imageFromSearch : category.url,
          },
        },
        {
          onSuccess: () => {
            void utils.categories.getCategories.invalidate();
            void utils.drinks.getAllDrinks.invalidate();
          },
        }
      );
      toast({
        title: `Updated category ${category.categoryName ?? ""}`,
        status: "success",
        isClosable: true,
        position: "top",
      });
      setImageFromSearch("");
    } catch (error) {
      if (typeof error === "string") {
        console.log(error);
      } else {
        console.log((error as Error).message);
      }
    }
  };

  const deleteCategoryHandler = async (id: number) => {
    if (window.confirm("Are you sure you want to delete this category?")) {
      try {
        await deleteSingleCategory.mutateAsync({ id });
        toast({
          title: `Deleted category #${id}`,
          status: "success",
          isClosable: true,
          position: "top",
        });
      } catch (error) {
        console.log(error);
      }
    }
  };

  const handleSelectedImage = (image: string) => {
    setImageFromSearch(image);
  };

  if (status === "loading") {
    return <Spinner />;
  }

  if (sessionData?.user?.role != "admin") {
    return <AccessDenied />;
  }

  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setCategoryId(parseInt(e.target.value));
  };

  return (
    <>
      <Head>
        <title>Edit Category</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container as="main" maxW="4xl">
        <Heading mt="3" textAlign="center">
          Edit category
        </Heading>
        <Grid templateColumns="repeat(6, 1fr)">
          <GridItem
            colSpan={{ base: 6, md: 3 }}
            as="aside"
            mr={{ base: "0", md: "3" }}
            mb={{ base: "3", md: "0" }}
          >
            <VStack spacing="5" mt="10">
              <Stack w="full">
                <FormLabel htmlFor="select-category">
                  Select a category
                </FormLabel>
                <Select
                  variant="filled"
                  onChange={handleCategoryChange}
                  id="select-category"
                >
                  <option value={0}>Select a category</option>
                  {(categories || []).map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.categoryName}
                    </option>
                  ))}
                </Select>
              </Stack>

              {!productCategory ||
                (categoryId !== 0 && (
                  <>
                    <Form onSubmit={handleSubmit(handleCategoryUpdate)}>
                      <FormControl>
                        <FormLabel htmlFor="categoryName">Title</FormLabel>
                        <Input
                          id="categoryName"
                          placeholder="Category name"
                          {...register("categoryName")}
                        />
                      </FormControl>
                      <FormControl>
                        <FormLabel htmlFor="url">Image</FormLabel>
                        <ImageSearch
                          handleSelectedImage={handleSelectedImage}
                        />
                        <Input
                          id="url"
                          placeholder="Image url"
                          {...register("url")}
                          hidden
                        />
                      </FormControl>
                      <Button
                        isDisabled={!productCategory}
                        type="submit"
                        colorScheme="primary"
                      >
                        Save changes
                      </Button>
                    </Form>
                    <HStack bg="blackAlpha.400" p="5" rounded="lg">
                      <Text>
                        Delete whole category and all drinks associated?
                      </Text>
                      <Button
                        onClick={() => deleteCategoryHandler(categoryId)}
                        disabled={updateCategory.isLoading || !productCategory}
                        colorScheme="red"
                        size="md"
                      >
                        Delete
                      </Button>
                    </HStack>
                  </>
                ))}
            </VStack>
          </GridItem>
          <GridItem
            colSpan={{ base: 6, md: 3 }}
            as="main"
            mt={{ base: "5", md: "1" }}
          >
            {/* Image */}
            <VStack mt="10">
              {!productCategory?.url ||
                (categoryId !== 0 && (
                  <>
                    <Text zIndex={1} fontWeight="bold">
                      Category image:
                    </Text>
                    <Box position="relative">
                      <Image
                        alt="category"
                        src={
                          hasSearchedImage
                            ? imageFromSearch
                            : productCategory?.url
                        }
                        objectFit="cover"
                        rounded="lg"
                        boxSize="sm"
                        position="absolute"
                        inset={0}
                        filter="blur(18px)"
                        zIndex={0}
                        transform="scale(1.1, 1.1)"
                      />
                      <Image
                        src={
                          hasSearchedImage
                            ? imageFromSearch
                            : productCategory?.url
                        }
                        alt="category"
                        zIndex={1}
                        boxSize="sm"
                        rounded="lg"
                        position="relative"
                        objectFit="cover"
                      />
                    </Box>
                  </>
                ))}
            </VStack>
          </GridItem>
        </Grid>
      </Container>
    </>
  );
};

export default EditCategory;
