import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Button from "../components/Button";
import Link from "next/link";
import { api } from "../utils/api";
import { Select } from "../components/Select";
import { useEffect, useState } from "react";
import { useGetCategory } from "../hooks/useGetCategory";
import { Input } from "../components/Input";
import Image from "next/image";
import { Form } from "../components/Form";
import useToaster from "../hooks/useToaster";
import { Toast } from "../components/Toast";

const EditCategory: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: categories } = api.drinks.getCategories.useQuery();
  const [categoryId, setCategoryId] = useState(17);
  const [formData, setFormData] = useState({
    categoryName: "",
    url: "",
  });

  const { category: productCategory } = useGetCategory(categoryId);

  const [error, setError] = useState("");

  const [isVisible, message, showToaster, isDisabled] = useToaster();

  const updateCategory = api.drinks.updateCategory.useMutation();

  useEffect(() => {
    if (productCategory) {
      setFormData({
        categoryName: productCategory.categoryName,
        url: productCategory.url as string,
      });
    }
  }, [productCategory]);

  const handleCategoryUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateCategory.mutateAsync({
        id: categoryId,
        data: {
          categoryName: formData.categoryName,
          url: formData.url,
        },
      });
      setError("");
      showToaster(`${formData.categoryName} updated`);
    } catch (error) {
      if (typeof error === "string") {
        showToaster(error);
        setError(error);
      } else {
        showToaster((error as Error).message);
        setError((error as Error).message);
      }
    }
  };

  if (sessionData?.user?.role != "admin") {
    return (
      <div className="flex h-screen flex-col items-center justify-center gap-3">
        <p className="uppercase">Access denied</p>
        <Link href="/">
          <Button>Go home</Button>
        </Link>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Edit Category</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-center gap-3">
        <div className="container mx-auto">
          <Select
            label="Select a Category"
            onChange={(e) => setCategoryId(parseInt(e.target.value))}
          >
            {(categories || []).map(
              (category) =>
                category.categoryName.toLowerCase() !== "all" && (
                  <option value={category.id} key={category.id}>
                    {category.categoryName}
                  </option>
                )
            )}
          </Select>
          <Form onSubmit={handleCategoryUpdate}>
            <Input
              label="Name"
              value={formData.categoryName}
              onChange={(e) =>
                setFormData({ ...formData, categoryName: e.target.value })
              }
              inputMode="text"
            />
            <Input
              label="Image Url"
              value={formData.url}
              onChange={(e) =>
                setFormData({ ...formData, url: e.target.value })
              }
              inputMode="text"
            />
            <Button disabled={isDisabled}>Submit</Button>
          </Form>
          <div className="flex flex-col">
            <h1>Preview image:</h1>
            <div className="relative h-96">
              {formData.url && (
                <Image
                  src={formData?.url}
                  alt="image"
                  fill
                  className="my-5 object-contain"
                  priority
                  placeholder="empty"
                  sizes="(max-width: 768px) 100vw,
          (max-width: 1200px) 50vw,
          33vw"
                />
              )}
            </div>
          </div>
        </div>
        {isVisible && (
          <Toast
            label={message}
            type={error ? "alert-error" : "alert-success"}
          />
        )}
      </main>
    </>
  );
};

export default EditCategory;
