import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Button from "../components/Button";
import { api } from "../utils/api";
import { Select } from "../components/Select";
import { useEffect, useState } from "react";
import { useGetCategory } from "../hooks/useGetCategory";
import { Input } from "../components/Input";
import Image from "next/image";
import { Form } from "../components/Form";
import useToaster from "../hooks/useToaster";
import { Toast } from "../components/Toast";
import AccessDenied from "../components/AccessDenied";

const EditCategory: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: categories } = api.categories.getCategories.useQuery();
  const [categoryId, setCategoryId] = useState(17);
  const [formData, setFormData] = useState({
    categoryName: "",
    url: "",
  });

  const { category: productCategory } = useGetCategory(categoryId);

  const [error, setError] = useState("");

  const [isVisible, message, showToaster, isDisabled] = useToaster();

  const updateCategory = api.categories.updateCategory.useMutation();

  useEffect(() => {
    if (productCategory) {
      setFormData({
        categoryName: productCategory.categoryName,
        url: productCategory.url as string,
      });
    }
  }, [productCategory]);

  const handleCategoryUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateCategory.mutateAsync({
        id: categoryId,
        data: {
          categoryName: formData.categoryName,
          url: formData.url,
        },
      });
      setError("");
      showToaster(`${formData.categoryName} updated`);
    } catch (error) {
      if (typeof error === "string") {
        showToaster(error);
        setError(error);
      } else {
        showToaster((error as Error).message);
        setError((error as Error).message);
      }
    }
  };

  if (sessionData?.user?.role != "admin") {
    return <AccessDenied />;
  }

  return (
    <>
      <Head>
        <title>Edit Category</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mb-10 flex flex-col items-center justify-center gap-3">
        <div className="container mx-auto">
          <h1 className="my-5 text-center text-xl">Edit Category</h1>
          <div className="grid md:mt-5 md:grid-cols-2 md:gap-10">
            <section className="mx-3 w-full">
              <Form onSubmit={handleCategoryUpdate} width="md:w-100 ">
                <Select
                  label="Select a Category"
                  onChange={(e) => setCategoryId(parseInt(e.target.value))}
                >
                  {(categories || []).map(
                    (category) =>
                      category.categoryName.toLowerCase() !== "all" && (
                        <option value={category.id} key={category.id}>
                          {category.categoryName}
                        </option>
                      )
                  )}
                </Select>
                <Input
                  label="Name"
                  value={formData.categoryName}
                  onChange={(e) =>
                    setFormData({ ...formData, categoryName: e.target.value })
                  }
                  inputMode="text"
                />
                <Input
                  label="Image Url"
                  value={formData.url}
                  onChange={(e) =>
                    setFormData({ ...formData, url: e.target.value })
                  }
                  inputMode="text"
                />
                <Button disabled={isDisabled} backgroundColor="bg-secondary">
                  Submit
                </Button>
              </Form>
            </section>
            <div>
              <div className="flex flex-col">
                <p className="text-center text-sm">Category Image</p>
                <div className="relative h-96">
                  {formData.url && (
                    <Image
                      src={formData?.url}
                      alt="image"
                      fill
                      className="my-2 object-contain p-3 md:border-l md:border-primary-content"
                      priority
                      placeholder="empty"
                      sizes="(max-width: 768px) 100vw,
          (max-width: 1200px) 50vw,
          33vw"
                    />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
        {isVisible && (
          <Toast
            label={message}
            type={error ? "alert-error" : "alert-success"}
          />
        )}
      </main>
    </>
  );
};

export default EditCategory;
