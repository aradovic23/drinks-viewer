import { type NextPage } from "next";
import Head from "next/head";
import {
  Alert,
  AlertDescription,
  AlertIcon,
  AlertTitle,
  Button,
  Container,
  extendTheme,
  Heading,
  HStack,
  Input,
  Text,
  VStack,
} from "@chakra-ui/react";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import nextI18nConfig from "../../next-i18next.config.mjs";
import { useSession } from "next-auth/react";
import AccessDenied from "../components/AccessDenied";
import CreateStoreForm from "../components/CreateStoreForm";
import StoreInfo from "../components/StoreInfo";
import { api } from "../utils/api";
import EditStoreForm from "../components/EditStoreForm";
import { PageSpinner } from "../components/LoaderSpinner";
import type { FormEvent } from "react";
import { useState } from "react";
import { Sketch } from "@uiw/react-color";
import Values from "values.js";

export const getServerSideProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ["common"], nextI18nConfig, [
      "en",
      "sr",
    ])),
  },
});

interface Shades {
  [key: number]: string;
}

const Settings: NextPage = () => {
  const { data: sessionData, status } = useSession();

  const { data: storeData, isLoading } = api.settings.getStore.useQuery();

  const utils = api.useContext();

  const [hex, setHex] = useState("#fff");
  const [primary, setPrimary] = useState({})
  const { mutate: deleteStore } = api.settings.deleteStore.useMutation({
    async onSuccess() {
      await utils.settings.getStore.invalidate();
    },
    onError(error) {
      console.log(error);
    },
  });


  const handleDeleteStore = (id: number) => {
    if (!window.confirm("Are you sure you want to delete?")) {
      return;
    }
    deleteStore({ id });
  };

  const handleSubmitColors = (e: FormEvent<Element>) => {
    e.preventDefault();
    try {
      const colors: Values[] = new Values(hex).all(11);
      const shades: Shades = {};

      colors.forEach((color: Values, i: number) => {
        const weight: number = (i + 1) * 50;
        if (weight <= 500) {
          shades[weight] = color.hexString();
        }
      })

      const primary = {
        primary: shades,
      }


      setPrimary(primary);
      console.log(primary)

    } catch (error) {
      console.log(error);
    }
  }

  if (status === "loading" || isLoading) {
    return <PageSpinner />;
  }

  if (sessionData?.user?.role != "ADMIN") {
    return <AccessDenied />;
  }

  return (
    <>
      <Head>
        <title>Settings {storeData?.name ?? ""}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container as="main" maxW="3xl" mt={5}>
        <VStack spacing={5}>
          <Heading>Settings</Heading>
          {!storeData && (
            <Alert status="info" rounded="md">
              <AlertIcon />
              <AlertTitle>No stores</AlertTitle>
              <AlertDescription>
                There is not a store added yet. Add a store details below.
              </AlertDescription>
            </Alert>
          )}
          {!storeData && <CreateStoreForm />}
          {storeData && (
            <HStack
              spacing="5"
              bg="blackAlpha.50"
              py="2"
              px="10"
              rounded="md"
              shadow="sm"
            >
              <VStack spacing="1">
                <StoreInfo {...storeData} />
                <Button
                  variant="ghost"
                  colorScheme="red"
                  onClick={() => handleDeleteStore(storeData?.id ?? 1)}
                >
                  Delete store
                </Button>
              </VStack>
              <VStack spacing="3">
                <EditStoreForm {...storeData} />
              </VStack>
            </HStack>
          )}
          {sessionData?.user?.name}
        </VStack>
        <VStack mt="2">
          <Heading size="md">Color settings</Heading>
          <Text>Select a color</Text>
          <Text color="grey">This will be your primary color throughout the app!</Text>
          {/* <Sketch
            color={hex}
            onChange={(color) => {
              setHex(color.hex);
            }}
          /> */}
          <VStack>
            <form onSubmit={handleSubmitColors}>
              <Input
                value={hex}
                onChange={(e) => setHex(e.target.value)}
                placeholder={hex ?? 'color'}
              />
              <Button colorScheme="primary" type="submit">Generate Color Scheme</Button>
            </form>
          </VStack>
        </VStack>
      </Container>
    </>
  );
};

export default Settings;
