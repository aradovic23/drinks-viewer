import { type NextPage } from "next";
import Head from "next/head";
import {
  Button,
  Container,
  Grid,
  GridItem,
  Heading,
  HStack,
  Image,
  VStack,
} from "@chakra-ui/react";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import nextI18nConfig from "../../next-i18next.config.mjs";
import { useSession } from "next-auth/react";
import AccessDenied from "../components/AccessDenied";
import CreateStoreForm from "../components/CreateStoreForm";
import { api } from "../utils/api";
import EditStoreForm from "../components/EditStoreForm";
import { PageSpinner } from "../components/LoaderSpinner";
import Notice from "../components/Notice";

export const getServerSideProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ["common"], nextI18nConfig, [
      "en",
      "sr",
    ])),
  },
});


const Settings: NextPage = () => {
  const { data: sessionData, status } = useSession();

  const { data: storeData, isLoading } = api.settings.getStore.useQuery();

  const utils = api.useContext();

  const { mutate: deleteStore } = api.settings.deleteStore.useMutation({
    async onSuccess() {
      await utils.settings.getStore.invalidate();
    },
    onError(error) {
      console.log(error);
    },
  });


  const handleDeleteStore = (id: number) => {
    if (!window.confirm("Are you sure you want to delete this store?")) {
      return;
    }
    deleteStore({ id });
  };

  if (status === "loading" || isLoading) {
    return <PageSpinner />;
  }

  if (sessionData?.user?.role != "ADMIN") {
    return <AccessDenied />;
  }

  return (
    <>
      <Head>
        <title>Settings {storeData?.name ?? ""}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container as="main" maxW="3xl" mt={5}>
        <VStack spacing={5} mb={5}>
          <Heading>Settings</Heading>
          {!storeData && (
            <Notice status="info" title="No store" description="Please add new store" />
          )}
          {!storeData && <CreateStoreForm />}
        </VStack>
        {storeData && (
          <>

            <Grid templateColumns="repeat(2, 1fr)" gap={5}>
              <GridItem>
                <Image
                  src={storeData.fileUrl ?? ""}
                  alt="image"
                  rounded="lg"
                  boxSize="xs"
                  objectFit="cover" />
              </GridItem>
              <GridItem>
                <EditStoreForm {...storeData} />
              </GridItem>
            </Grid>
            <HStack>
              <Button
                variant="ghost"
                colorScheme="red"
                onClick={() => handleDeleteStore(storeData?.id ?? 1)}
              >
                Delete store
              </Button>
            </HStack>

          </>
        )}
      </Container>
    </>
  );
};

export default Settings;
