import { type NextPage } from "next";
import Head from "next/head";
import {
  Alert,
  AlertDescription,
  AlertIcon,
  AlertTitle,
  Button,
  Container,
  Heading,
  HStack,
  Spinner,
  VStack,
} from "@chakra-ui/react";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import nextI18nConfig from "../../next-i18next.config.mjs";
import { getSession, useSession } from "next-auth/react";
import AccessDenied from "../components/AccessDenied";
import CreateStoreForm from "../components/CreateStoreForm";
import StoreInfo from "../components/StoreInfo";
import { api } from "../utils/api";
import EditStoreForm from "../components/EditStoreForm";
import { PageSpinner } from "../components/LoaderSpinner.jsx";

export const getServerSideProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ["common"], nextI18nConfig, [
      "en",
      "sr",
    ])),
  },
});

const Settings: NextPage = () => {
  const { data: sessionData, status } = useSession();

  const { data: storeData, isLoading } = api.settings.getStore.useQuery();

  const utils = api.useContext();

  const { mutate: deleteStore } = api.settings.deleteStore.useMutation({
    async onSuccess() {
      await utils.settings.getStore.invalidate();
    },
    onError(error) {
      console.log(error);
    },
  });

  const handleDeleteStore = (id: number) => {
    if (!window.confirm("u sure?")) {
      return;
    }
    deleteStore({ id });
  };

  if (status === "loading" || isLoading) {
    return <PageSpinner />;
  }

  if (sessionData?.user?.role != "ADMIN") {
    return <AccessDenied />;
  }

  return (
    <>
      <Head>
        <title>Settings {storeData?.name ?? ""}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container as="main" maxW="3xl" mt={5}>
        <VStack spacing={5}>
          <Heading>Settings</Heading>
          {!storeData && (
            <Alert status="info" rounded="md">
              <AlertIcon />
              <AlertTitle>No stores</AlertTitle>
              <AlertDescription>
                There is not a store added yet. Add a store details below.
              </AlertDescription>
            </Alert>
          )}
          {!storeData && <CreateStoreForm />}
          {storeData && (
            <HStack
              spacing="5"
              bg="blackAlpha.50"
              py="2"
              px="10"
              rounded="md"
              shadow="sm"
            >
              <VStack spacing="1">
                <StoreInfo {...storeData} />
                <Button
                  variant="ghost"
                  colorScheme="red"
                  onClick={() => handleDeleteStore(storeData?.id ?? 1)}
                >
                  Delete store
                </Button>
              </VStack>
              <VStack spacing="3">
                <EditStoreForm {...storeData} />
              </VStack>
            </HStack>
          )}
          {sessionData?.user?.name}
        </VStack>
      </Container>
    </>
  );
};

export default Settings;
