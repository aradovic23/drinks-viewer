import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { api } from "../../utils/api";
import { useEffect, useState } from "react";
import { Input } from "../../components/Input";
import { useGetCategory } from "../../hooks/useGetCategory";
import Button from "../../components/Button";
import { Textarea } from "../../components/Textarea";
import { Form } from "../../components/Form";
import { toast } from "react-toastify";

const EditDrinkPage: NextPage = () => {
  const [formData, setFormData] = useState({
    title: "",
    price: "",
    volume: "",
    type: "",
    description: "",
    tag: "",
  });

  const router = useRouter();
  const { id } = router.query as {
    id: string;
  };
  const { data, isLoading } = api.drinks.getDrinkById.useQuery<{
    id: number;
    categoryId: number;
  }>(
    { id },
    {
      refetchOnWindowFocus: false,
    }
  );

  let categoryId: number | undefined;

  if (data && data.categoryId) {
    categoryId = data.categoryId;
  }

  const { category: productCategory } = useGetCategory(categoryId as number);

  const updateProduct = api.drinks.updateDrink.useMutation();

  const handleProductUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await toast.promise(
        updateProduct.mutateAsync({
          id,
          data: {
            title: formData.title,
            price: formData.price,
            volume: formData.volume === "" ? null : formData.volume,
            type: formData.type === "" ? null : formData.type,
            description:
              formData.description === "" ? null : formData.description,
            tag: formData.tag === "" ? null : formData.tag,
          },
        }),
        {
          pending: "Pending...",
          success: `${formData.title} updated`,
          error: "An error occured ðŸ¤¯",
        }
      );
      router.back();
    } catch (error) {
      if (typeof error === "string") {
        toast.error(error);
      }
    }
  };

  useEffect(() => {
    if (data) {
      setFormData({
        title: data.title,
        price: data.price,
        volume: data.volume ?? "",
        type: data.type ?? "",
        description: data.description ?? "",
        tag: data.tag ?? "",
      });
    }
  }, [data]);

  return (
    <>
      <Head>
        <title>{data?.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mb-10 flex min-h-screen">
        <section className="container mx-auto flex h-screen flex-col items-center py-10">
          <h1 className="my-5 text-center text-2xl font-bold">Edit product</h1>
          {isLoading && <p>Loading...</p>}
          <Form onSubmit={handleProductUpdate}>
            <Input
              label="Title"
              value={formData.title}
              onChange={(e) =>
                setFormData({ ...formData, title: e.target.value })
              }
              inputMode="text"
            />
            <Input
              label="Price"
              value={formData.price}
              onChange={(e) =>
                setFormData({ ...formData, price: e.target.value })
              }
              inputMode="numeric"
            />
            <Input
              placeholder="For example (0.3, 0.5)"
              inputMode="text"
              value={formData.volume}
              onChange={(e) =>
                setFormData({ ...formData, volume: e.target.value })
              }
              label="Volume"
            />
            <Input
              placeholder="For example (new, best)"
              inputMode="text"
              value={formData.tag}
              onChange={(e) =>
                setFormData({ ...formData, tag: e.target.value })
              }
              label="Tag"
            />

            {productCategory?.categoryName.toLowerCase() === "tea" && (
              <Input
                label="Type"
                inputMode="text"
                value={formData.type}
                onChange={(e) =>
                  setFormData({ ...formData, type: e.target.value })
                }
              />
            )}
            {productCategory?.categoryName.toLowerCase() === "cocktails" && (
              <Textarea
                placeholder="Add description"
                value={formData.description}
                onChange={(e) =>
                  setFormData({ ...formData, description: e.target.value })
                }
                label="Add cocktail description"
              ></Textarea>
            )}
            <Button
              disabled={updateProduct.isLoading}
              backgroundColor="bg-primary"
            >
              Update product
            </Button>
          </Form>
        </section>
      </main>
    </>
  );
};

export default EditDrinkPage;
